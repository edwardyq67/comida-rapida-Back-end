generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  nombre    String?
  rol       Rol      @default(USER)   // ðŸ‘ˆ Nuevo campo para roles
  creadoEn  DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}

enum Rol {
  ADMIN
  KITCHEN
  USER
}


model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  imagen    String?
  activo    Boolean    @default(true)
  productos Producto[]

  @@map("categorias")
}

model Producto {
  id          Int     @id @default(autoincrement())
  nombre      String
  descripcion String?
  imagen      String?
  precio      Float
  activo      Boolean @default(true)

  categoria_id Int
  categoria    Categoria @relation(fields: [categoria_id], references: [id])

  tamano_id Int?
  tamano    Tamano? @relation(fields: [tamano_id], references: [id])

  porcion_id Int?
  porcion    Porcion? @relation(fields: [porcion_id], references: [id])

  // Relaciones
  ingredientes       ProductoIngrediente[]   
  tamanosDisponibles ProductoTamano[]       @relation("ProductoToProductoTamano")
  pedidoItems        PedidoItem[]           @relation("ProductoToPedidoItem")
}

model Tamano {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  productos      Producto[]
  productosPivot ProductoTamano[]
  pedidoItems    PedidoItem[]

  @@map("tamanos")
}

model Porcion {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  productos Producto[]

  @@map("porciones")
}

model Ingrediente {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  productos          ProductoIngrediente[]
  pedidoIngredientes PedidoIngrediente[]

  @@map("ingredientes")
}

model Adicional {
  id     Int     @id @default(autoincrement())
  nombre String
  precio Float
  imagen String?
  activo Boolean @default(true)

  pedidoAdicionales PedidoAdicional[]

  @@map("adicionales")
}

// Tablas pivote
model ProductoTamano {
  id          Int   @id @default(autoincrement())
  producto_id Int
  tamano_id   Int
  precio      Float

  producto Producto @relation(fields: [producto_id], references: [id], name: "ProductoToProductoTamano")
  tamano   Tamano   @relation(fields: [tamano_id], references: [id])

  pedidoItems PedidoItem[]

  @@unique([producto_id, tamano_id])
  @@map("producto_tamanos")
}

model ProductoIngrediente {
  id             Int     @id @default(autoincrement())
  producto_id    Int
  ingrediente_id Int
  opcional       Boolean @default(false)
  por_defecto    Boolean @default(true)

  producto    Producto    @relation(fields: [producto_id], references: [id])
  ingrediente Ingrediente @relation(fields: [ingrediente_id], references: [id])

  @@unique([producto_id, ingrediente_id])
  @@map("producto_ingredientes")
}

model EstadoPedido {
  id      Int      @id @default(autoincrement())
  nombre  String   @unique
  pedidos Pedido[]

  @@map("estado_pedidos")
}

model Pedido {
  id      Int      @id @default(autoincrement())
  cliente String?
  fecha   DateTime @default(now())
  total   Float
  notas   String?

  estado_id Int
  estado    EstadoPedido @relation(fields: [estado_id], references: [id])

  pedidoItems PedidoItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pedidos")
}

model PedidoItem {
  id                Int     @id @default(autoincrement())
  pedido_id         Int
  producto_id       Int
  productoTamano_id Int?
  cantidad          Int     @default(1)
  precio_unitario   Float
  subtotal          Float
  observaciones     String?

  pedido         Pedido          @relation(fields: [pedido_id], references: [id])
  producto       Producto        @relation(fields: [producto_id], references: [id], name: "ProductoToPedidoItem")
  productoTamano ProductoTamano? @relation(fields: [productoTamano_id], references: [id])

  // RelaciÃ³n directa con tamaÃ±o si aplica
  tamanoId Int?
  Tamano   Tamano? @relation(fields: [tamanoId], references: [id])

  // Ingredientes y adicionales
  pedidoIngredientes PedidoIngrediente[]
  pedidoAdicionales  PedidoAdicional[]

  @@map("pedido_items")
}

model PedidoIngrediente {
  id             Int     @id @default(autoincrement())
  pedidoItem_id  Int
  ingrediente_id Int
  incluido       Boolean @default(true)

  pedidoItem  PedidoItem  @relation(fields: [pedidoItem_id], references: [id])
  ingrediente Ingrediente @relation(fields: [ingrediente_id], references: [id])

  @@map("pedido_ingredientes")
}

model PedidoAdicional {
  id              Int   @id @default(autoincrement())
  pedidoItem_id   Int
  adicional_id    Int
  cantidad        Int   @default(1)
  precio_unitario Float

  pedidoItem PedidoItem @relation(fields: [pedidoItem_id], references: [id])
  adicional  Adicional  @relation(fields: [adicional_id], references: [id])

  @@map("pedido_adicionales")
}
